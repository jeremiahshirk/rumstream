#!/usr/bin/env ruby
require 'em-http'
require 'riemann/client'
require 'csv'

while true
  EventMachine.run do

    riemann_host = 'cognus.ome.ksu.edu'
    url = ARGV.first
    http = EventMachine::HttpRequest.new(url).get

    recent_bytes = recent_lines = recent_chunks = 0
    EventMachine.add_periodic_timer(10) do
      $stdout.write "Processed #{recent_bytes}:#{recent_lines}:#{recent_chunks} bytes:lines:chunks\n"
      if recent_chunks == 0
        # TODO make abort time independent of frequency of reporting loop
        $stderr.write "Received no data, aborting.\n"
        EventMachine.stop_event_loop
      end
      recent_bytes = recent_lines = recent_chunks = 0
    end

    c = Riemann::Client.new host: riemann_host, port: 5555
    headers = nil
    #partial_line = ""
    buffer = ""

    http.stream  do |chunk| 
      recent_chunks += 1
      recent_bytes += chunk.length
      buffer << chunk
      
      while line = buffer.slice!(/.+\r?\n/)
        recent_lines += 1

        begin
          fields = CSV.parse(line).first
        rescue
          $stderr.write "Error parsing line:\n"
          $stderr.write line.inspect + "\n"
          $stderr.write "Buffer:\n"
          $stderr.write buffer.inspect + "\n"
          next
        end

        if fields and fields.first == "#x-record-type"
          headers = fields
          headers[0] = "x-record-type"
        else 
          if headers and fields and fields.first[0,1] != '#'
            update =  Hash[headers.zip(fields)]
            update['service'] = "truesight"
            # TODO: handle errors sending to Riemann
            c.tcp << update
          end
        end
        
      end # lines.each
    end # http.stream
  end # EventMachine.run
end # while true
